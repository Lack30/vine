// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package entsql

import "github.com/lack-io/vine/service/ent/schema"

// Annotation is a builtin schema annotation for attaching
// SQL metadata to schema objects for both codegen and runtime.
type Annotation struct {
	// The Table option allows overriding the default table
	// name that is generated by ent. For exmaple:
	//
	// entsql.Annotation{
	//		Table: "Users",
	// }
	Table string `json:"table,omitempty"`

	// Charset defines character-set of the table. For exmaple:
	//
	// entsql.Annotation{
	// 		Charset: "utf8mb4",
	// }
	Charset string `json:"charset,omitempty"`

	// Collation defines the collection of the table (a set of rules for comparing
	// characters in a character set). For example:
	//
	// entsql.Annotation{
	//		Collation: "utf8mb4_bin",
	// }
	Collation string `json:"collation,omitempty"`

	// Options defines the additional table options. For example:
	//
	// entsql.Annotation{
	//		Options: "ENGINE = INNODB",
	// }
	Options string `json:"options,omitempty"`

	// Size defines the column size in the generated schema. For example:
	//
	// entsql.Annotation{
	//		Size: 128,
	// }
	Size int64 `json:"size,omitempty"`

	// Incremental defines the autoincremental behavior of a column. For example:
	//
	// incrementalEnabled := true
	// entsql.Annotation{
	//		Incremental: &incrementalEnabled,
	// }
	//
	// By default, this value is nil defaulting to whatever best fits each scenario.
	//
	Incremental *bool `json:"incremental,omitempty"`
}

// Name describes the annotation name.
func (Annotation) Name() string {
	return "EntSQL"
}

// Merge implements the schema.Merge interface.
func (a Annotation) Merge(other schema.Annotation) schema.Annotation {
	var ant Annotation
	switch other := other.(type) {
	case Annotation:
		ant = other
	case *Annotation:
		if other != nil {
			ant = *other
		}
	default:
		return a
	}
	if t := ant.Table; t != "" {
		a.Table = t
	}
	if c := ant.Charset; c != "" {
		a.Charset = c
	}
	if c := ant.Collation; c != "" {
		a.Collation = c
	}
	if o := ant.Options; o != "" {
		a.Options = o
	}
	if s := ant.Size; s != 0 {
		a.Size = s
	}
	if s := ant.Incremental; s != nil {
		a.Incremental = s
	}
	return a
}

var (
	_ schema.Annotation = (*Annotation)(nil)
	_ schema.Merger     = (*Annotation)(nil)
)
