// Copyright 2020 The vine Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This file was autogenerated by goproto-gen. Do not edit it manually!

syntax = 'proto2';

package github.com.lack_io.vine.internal.meta.v1;

// Package-wide variables from generator "generated".
option go_package = "v1";

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create
message ObjectMeta {
  // Name must be unique within a namespace. Is required when creating resources, although
  // some resources may allow a client to request the generation of an appropriate name
  // automatically. Name is primarily intended for creation idempotence and configuration
  // definition.
  // Cannot be updated.
  // +optional
  optional string name = 1;

  // Namespace defines the space within which each name must be unique. An empty namespace is
  // equivalent to the "default" namespace, but "default" is the canonical representation.
  // Not all objects are required to be scoped to a namespace - the value of this field for
  // those objects will be empty.
  //
  // Must be a DNS_LABEL.
  // Cannot be updated.
  // +optional
  optional string namespace = 2;

  // UID is the unique in time and space value for this object. It is typical generated by
  // the server on successfully creation of the resource and is not allowed to change on PUT
  // operations.
  //
  // Populated by the system.
  // Read-Only.
  // +optional
  optional string uid = 3;

  // CreationTimestamp is a timestamp representing the server time when this object was
  // created. It is not guaranteed to be set in happens-before order across separate operation.
  // Clients may not set this value. It is represented in timestamp form and accurate to the second.
  //
  // Populated by the system.
  // Read-Only
  // +optional
  optional int64 creationTimestamp = 4;

  // UpdateTimestamp is a timestamp represent this server time when this object was
  // updated. It is not not guaranteed to be set in happens-before order across separate operation.
  // Client may not be set this value. It is represented in timestamp form and accurate to the second.
  //
  // Populated by the system.
  // Read-Only
  // +optional
  optional int64 updateTimestamp = 5;

  // DeletionGrace a choice, whether to really delete this object. It's always showing with
  // DeletionTimestamp together. If true this object don't be deleted, and DeletionTimestamp
  // will be set.
  //
  // Populated by the system.
  // Read-Only
  // +optional
  optional bool deletionGrace = 6;

  // DeletionTimestamp is a timestamp represent this server time when this object was
  // deleted and the DeletionGrace field is true. It is represented in timestamp form
  // and accurate to the second.
  //
  // Populated by the system.
  // Read-Only
  // +optional
  optional int64 deletionTimestamp = 7;

  // Map of string keys and values that can be used to organize and categorize
  // (scope and select) objects.
  // +optional
  map<string, string> labels = 8;

  // Annotations is an unstructured key value map stored with a resource that may be
  // set by external tools to store and retrieve arbitrary metadata. They are not
  // query and should be preserved when modify objects.
  // +optional
  map<string, string> annotations = 9;

  // List of objects depended by this object. If ALL objects in the list have
  // been deleted, this object will be garbage collected.
  repeated OwnerReference ownerReferences = 10;
}

// OwnerReference contains enough information to let you identify an owning
// object. An owning object must be in the same namespace as the dependent,
// so there is no namespace field.
message OwnerReference {
  // API Version of the referent.
  // +optional
  optional string apiVersion = 1;

  // Kind of the referent.
  // +optional
  optional string kind = 2;

  // +optional
  // Name of the referent.
  optional string name = 3;

  // UID of the referent.
  // +optional
  optional string uid = 4;
}

// Status contains the return value information of the gRPC request.
// Each gRPC response will contains Status.
message Status {
  // Project is the name for this object. It will be assigned when project be created
  //
  // Read-Only
  // +optional
  optional string project = 1;

  // Service is the unique for this project. It will be assigned when service be created.
  //
  // Read-Only
  // +optional
  optional string service = 2;

  // Code of status
  // It's meaning the request is successfully if code equal 0
  // +optional
  optional int32 code = 3;

  // The description of code
  // +optional
  optional string message = 4;

  // Description of status
  // It will be set when requests fails
  // +optional
  optional string desc = 5;

  // The position of exception
  // It will be set when requests fails
  // +optional
  optional string pos = 6;

  // The information of call stack
  // It will be set when requests fails
  // +optional
  repeated StatusDetail detail = 7;
}

// StatusDetail contains the information of call stack
message StatusDetail {
  // The position of this call stack
  // +optional
  optional string pos = 1;

  // Description of this call stack
  // +optional
  optional string desc = 2;
}

// TypeMeta describes an individual object in an API response or request
// with strings representing the type of the object and its API schema version.
// Structures that are versioned or persisted should inline TypeMeta.
//
// +vine:deepcopy-gen=false
message TypeMeta {
  // Kind is a string value representing the REST resource this object represents.
  // Servers may inter this from the endpoint the client submits requests to.
  // Cannot be updated
  // In CamlCase.
  // +optional
  optional string kind = 1;

  // APIVersion defines the versioned schema of this representation of an object.
  // Servers should convert recognized schema to the latest internal value, and
  // may reject unrecognized values.
  // +optional
  optional string apiVersion = 2;
}

