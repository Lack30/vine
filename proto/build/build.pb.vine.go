// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/lack-io/vine/proto/build/build.proto

package build

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/lack-io/vine/service/api"
	client "github.com/lack-io/vine/service/client"
	server "github.com/lack-io/vine/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Build service
func NewBuildEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Build service
type BuildService interface {
	Build(ctx context.Context, opts ...client.CallOption) (Build_BuildService, error)
}

type buildService struct {
	c    client.Client
	name string
}

func NewBuildService(name string, c client.Client) BuildService {
	return &buildService{
		c:    c,
		name: name,
	}
}

func (c *buildService) Build(ctx context.Context, opts ...client.CallOption) (Build_BuildService, error) {
	req := c.c.NewRequest(c.name, "Build.Build", &BuildRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &buildServiceBuild{stream}, nil
}

type Build_BuildService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BuildRequest) error
	Recv() (*Result, error)
}

type buildServiceBuild struct {
	stream client.Stream
}

func (x *buildServiceBuild) Close() error {
	return x.stream.Close()
}

func (x *buildServiceBuild) Context() context.Context {
	return x.stream.Context()
}

func (x *buildServiceBuild) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *buildServiceBuild) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *buildServiceBuild) Send(m *BuildRequest) error {
	return x.stream.Send(m)
}

func (x *buildServiceBuild) Recv() (*Result, error) {
	m := new(Result)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Build service
type BuildHandler interface {
	Build(context.Context, Build_BuildStream) error
}

func RegisterBuildHandler(s server.Server, hdlr BuildHandler, opts ...server.HandlerOption) error {
	type buildImpl interface {
		Build(ctx context.Context, stream server.Stream) error
	}
	type Build struct {
		buildImpl
	}
	h := &buildHandler{hdlr}
	return s.Handle(s.NewHandler(&Build{h}, opts...))
}

type buildHandler struct {
	BuildHandler
}

func (h *buildHandler) Build(ctx context.Context, stream server.Stream) error {
	return h.BuildHandler.Build(ctx, &buildBuildStream{stream})
}

type Build_BuildStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Result) error
	Recv() (*BuildRequest, error)
}

type buildBuildStream struct {
	stream server.Stream
}

func (x *buildBuildStream) Close() error {
	return x.stream.Close()
}

func (x *buildBuildStream) Context() context.Context {
	return x.stream.Context()
}

func (x *buildBuildStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *buildBuildStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *buildBuildStream) Send(m *Result) error {
	return x.stream.Send(m)
}

func (x *buildBuildStream) Recv() (*BuildRequest, error) {
	m := new(BuildRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
