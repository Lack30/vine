// Copyright 2020 The vine Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1

// TypeMeta describes an individual object in an API response or request
// with strings representing the type of the object and its API schema version.
// Structures that are versioned or persisted should inline TypeMeta.
//
// +vine:deepcopy-gen=false
type TypeMeta struct {
	// Kind is a string value representing the REST resource this object represents.
	// Servers may inter this from the endpoint the client submits requests to.
	// Cannot be updated
	// In CamlCase.
	// +optional
	Kind string `json:"kind,omitempty" protobuf:"bytes,1,opt,name=kind"`

	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schema to the latest internal value, and
	// may reject unrecognized values.
	// +optional
	APIVersion string `json:"apiVersion,omitempty" protobuf:"bytes,2,opt,name=apiVersion"`
}

// ListMeta describes metadata that synthetic resources must have, include lists and
// various status object. A resource may have only one of {ObjectMeta, ListMeta}
type ListMeta struct {
	// Offset may be set if user queries collections. It means
	//
	// Read-Only
	// +optional
	Offset int32 `json:"offset,omitempty" protobuf:"varint,1,opt,name=offset"`

	// Limit may be set if user queries collections.
	//
	// Read-Only
	// +optional
	Limit int32 `json:"limit,omitempty" protobuf:"varint,2,opt,name=limit"`

	// Count is the number of collections eligibly
	//
	// Read-Only
	// +optional
	Count int64 `json:"counts,omitempty" protobuf:"varint,3,opt,name=counts"`
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create
type ObjectMeta struct {
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	//
	// Cannot be updated.
	// +optional
	Name string `json:"name,omitempty" protobuf:"bytes,1,opt,name=name"`

	// Desc is a descriptive text and allow client to modify it.
	// +optional
	Desc string `json:"desc,omitempty" protobuf:"bytes,2,opt,name=desc"`

	// Namespace defines the space within which each name must be unique. An empty namespace is
	// equivalent to the "default" namespace, but "default" is the canonical representation.
	// Not all objects are required to be scoped to a namespace - the value of this field for
	// those objects will be empty.
	//
	// Must be a DNS_LABEL.
	// Cannot be updated.
	// +optional
	Namespace string `json:"namespace,omitempty" protobuf:"bytes,3,opt,name=namespace"`

	// UID is the unique in time and space value for this object. It is typical generated by
	// the server on successfully creation of the resource and is not allowed to change on PUT
	// operations.
	//
	// Populated by the system.
	// Read-Only.
	// +optional
	UID string `json:"uid,omitempty" protobuf:"bytes,4,opt,name=uid"`

	// CreationTimestamp is a timestamp representing the server time when this object was
	// created. It is not guaranteed to be set in happens-before order across separate operation.
	// Clients may not set this value. It is represented in timestamp form and accurate to the second.
	//
	// Populated by the system.
	// Read-Only
	// +optional
	CreationTimestamp int64 `json:"creationTimestamp,omitempty" protobuf:"varint,5,opt,name=creationTimestamp"`

	// UpdateTimestamp is a timestamp represent this server time when this object was
	// updated. It is not not guaranteed to be set in happens-before order across separate operation.
	// Client may not be set this value. It is represented in timestamp form and accurate to the second.
	//
	// Populated by the system.
	// Read-Only
	// +optional
	UpdateTimestamp int64 `json:"updateTimestamp,omitempty" protobuf:"varint,6,opt,name=updateTimestamp"`

	// DeletionGrace a choice, whether to really delete this object. It's always showing with
	// DeletionTimestamp together. If true this object don't be deleted, and DeletionTimestamp
	// will be set.
	//
	// Populated by the system.
	// Read-Only
	// +optional
	DeletionGrace bool `json:"deletionGrace,omitempty" protobuf:"varint,7,opt,name=deletionGrace"`

	// DeletionTimestamp is a timestamp represent this server time when this object was
	// deleted and the DeletionGrace field is true. It is represented in timestamp form
	// and accurate to the second.
	//
	// Populated by the system.
	// Read-Only
	// +optional
	DeletionTimestamp int64 `json:"deletionTimestamp,omitempty" protobuf:"varint,8,opt,name=deletionTimestamp"`

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects.
	// +optional
	Labels Map `json:"labels,omitempty" protobuf:"bytes,9,rep,name=labels"`

	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// query and should be preserved when modify objects.
	// +optional
	Annotations Map `json:"annotations,omitempty" protobuf:"bytes,10,rep,name=annotations"`

	// List of objects depended by this object. If ALL objects in the list have
	// been deleted, this object will be garbage collected.
	OwnerReferences OwnerReferences `json:"ownerReferences,omitempty" protobuf:"bytes,11,rep,name=ownerReferences"`
}

// Map wraps builtin-map. It implements driver.Valuer
type Map map[string]string

// OwnerReferences wraps Array of OwnerReference. It implements driver.Valuer
type OwnerReferences []OwnerReference

// OwnerReference contains enough information to let you identify an owning
// object. An owning object must be in the same namespace as the dependent,
// so there is no namespace field.
type OwnerReference struct {
	// API Version of the referent.
	// +optional
	APIVersion string `json:"apiVersion,omitempty" protobuf:"bytes,1,opt,name=apiVersion"`
	// Kind of the referent.
	// +optional
	Kind string `json:"kind,omitempty" protobuf:"bytes,2,opt,name=kind"`
	// +optional
	// Name of the referent.
	Name string `json:"name,omitempty" protobuf:"bytes,3,opt,name=name"`
	// UID of the referent.
	// +optional
	UID string `json:"uid,omitempty" protobuf:"bytes,4,opt,name=uid"`
}

// Status contains the return value information of the gRPC request.
// Each gRPC response will contains Status.
type Status struct {
	// Project is the name for this object. It will be assigned when project be created
	//
	// Read-Only
	// +optional
	Project string `json:"project,omitempty" protobuf:"bytes,1,opt,name=project"`

	// Service is the unique for this project. It will be assigned when service be created.
	//
	// Read-Only
	// +optional
	Service string `json:"service,omitempty" protobuf:"bytes,2,opt,name=service"`

	// Code of status
	// It's meaning the request is successfully if code equal 0
	// +optional
	Code int32 `json:"code,omitempty" protobuf:"varint,3,opt,name=code"`

	// The description of code
	// +optional
	Message string `json:"message,omitempty" protobuf:"bytes,4,opt,name=message"`

	// Description of status
	// It will be set when requests fails
	// +optional
	Desc string `json:"desc,omitempty" protobuf:"bytes,5,opt,name=desc"`

	// The position of exception
	// It will be set when requests fails
	// +optional
	Pos string `json:"pos,omitempty" protobuf:"bytes,6,opt,name=pos"`

	// The information of call stack
	// It will be set when requests fails
	// +optional
	Details []StatusDetail `json:"detail,omitempty" protobuf:"bytes,7,rep,name=detail"`
}

// StatusDetail contains the information of call stack
type StatusDetail struct {
	// The position of this call stack
	// +optional
	Pos string `json:"pos,omitempty" protobuf:"bytes,1,opt,name=pos"`

	// Description of this call stack
	// +optional
	Desc string `json:"desc,omitempty" protobuf:"bytes,2,opt,name=desc"`
}

// +vine:deepcopy-gen:interfaces=github.com/lack-io/vine/internal/runtime.Object
// WatchStatus used by github.com/lack-io/vine/internal/db/watch.Event if event result error.
type WatchStatus struct {
	TypeMeta `json:",inline"`

	Status Status `json:"status,omitempty" protobuf:"bytes,1,opt,name=status"`
}

