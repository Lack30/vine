<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vine – 欢迎来到 Vine 文档</title>
    <link>https://lack-io.github.io/vine/docs/</link>
    <description>Recent content in 欢迎来到 Vine 文档 on Vine</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 29 Dec 2020 09:54:20 +0800</lastBuildDate>
    
	  <atom:link href="https://lack-io.github.io/vine/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 接口</title>
      <link>https://lack-io.github.io/vine/docs/framework/interface/</link>
      <pubDate>Tue, 29 Dec 2020 11:15:20 +0800</pubDate>
      
      <guid>https://lack-io.github.io/vine/docs/framework/interface/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;2020-12-29-08-51-23.png&#34; alt=&#34;service内部结构&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Vine&lt;/strong&gt; 内置以下的接口列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Auth&lt;/strong&gt; - 身份验证和授权&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;broker&lt;/strong&gt; - 异步消息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client&lt;/strong&gt; - 高级请求/响应和消息通知&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;config&lt;/strong&gt; - 动态配置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;codec&lt;/strong&gt; - 消息编码和解码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;debug&lt;/strong&gt; - debug 日志，跟踪，统计信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;network&lt;/strong&gt; - 多云下的网络&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;registry&lt;/strong&gt; - 服务发现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;runtime&lt;/strong&gt; - 服务运行时状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;selector&lt;/strong&gt; - 均衡负载&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;server&lt;/strong&gt; - 处理请求和通知&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;store&lt;/strong&gt; - 数据存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sync&lt;/strong&gt; - 同步，锁和领导选举&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;transport&lt;/strong&gt; - 同步通讯&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tunnel&lt;/strong&gt; - vpn 隧道&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;broker&#34;&gt;Broker&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Broker&lt;/strong&gt; 为异步 pub/sub 子通讯提供消息代理的接口。这是事件驱动结构和微服务的基本要求之一。在默认情况下，我们使用 HTTP 协议实现 Broker 接口，以减少依赖。在 &lt;a href=&#34;github.com/lack-io/plugins&#34;&gt;plugins&lt;/a&gt; 中有许多 Broker 的实现。例如：RabbitMQ，NATS，NSQ等。&lt;/p&gt;
&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt; 提供一个接口来向服务发出请求。和 Server 一样，它构建在其他包上并提供统一的接口。使用 Registry 来查找服务，使用Transport进行同步请求。&lt;/p&gt;
&lt;h2 id=&#34;codec&#34;&gt;Codec&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Codec&lt;/strong&gt; 用于编码和解码消息。这些数据格式可能是 json, protobuf, beson 等。同时还是各种 RPC 数据格式，例如 PROTO-RPC, JSON-RPC, BSON-RPC等。它将编码解码与 Client/Server 分离，并提供继承其他系统的强大方法。&lt;/p&gt;
&lt;h2 id=&#34;config&#34;&gt;Config&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Config&lt;/strong&gt; 是一个接口。用于从任意数量的源进行动态配置加载，这些源可以合并。大多数系统都主动要求有独立于代码进行更改的配置。通过&lt;strong&gt;Config&lt;/strong&gt;接口，可以根据需要动态加载这些值，它还支持各种不同的配置格式。&lt;/p&gt;
&lt;h2 id=&#34;server&#34;&gt;Server&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt; 是编写服务器基础模块。在这里，你可以为服务命名，注册请求处理器，添加中间件等。该服务基于上述包，为服务请求提供统一接口。目前有 gRPC 和 HTTP 两种内置实现。&lt;strong&gt;Server&lt;/strong&gt; 还允许你定义多个 Codec 以服务不同的编码消息。&lt;/p&gt;
&lt;h2 id=&#34;store&#34;&gt;Store&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Store&lt;/strong&gt; 是一个简单的键值对存储接口，用于抽象轻量级的数据存储。我们不是在试图实现一个完整的 sql 语言或者存储，只是仅仅保存服务状态。&lt;/p&gt;
&lt;h2 id=&#34;registry&#34;&gt;Registry&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Registry&lt;/strong&gt; 提供一种服务发现机制，能将服务名称解析为对应的IP地址。它可以由 consul，etcd，zookeeper，dns等支持。服务在启动时注册到 &lt;strong&gt;Registry&lt;/strong&gt; 中，并在关闭是注销。服务可能选择提供 TTL，并在这个间隔时间内重新注册，以确保服务在失效时进行清理。&lt;/p&gt;
&lt;h2 id=&#34;selector&#34;&gt;Selector&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Selector&lt;/strong&gt; 是负载均衡的一种抽象，它建立在 &lt;em&gt;Registry&lt;/em&gt; 上。它允许通过对应的策略选择服务，如随机，循环，最小等算法选择服务。&lt;strong&gt;Client&lt;/strong&gt; 在请求时使用 &lt;strong&gt;Selector&lt;/strong&gt; 来实现客户端均衡负载。&lt;/p&gt;
&lt;h2 id=&#34;transport&#34;&gt;Transport&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Transport&lt;/strong&gt; 是服务之间同步请求/响应的接口。它类似与 golang 网络包，但提供一个更高级别的抽象，允许我们切换通讯机制，例如 http、rabbitmq、websocket、NATS等。它还支持双向流。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Service</title>
      <link>https://lack-io.github.io/vine/docs/guides/service/</link>
      <pubDate>Tue, 29 Dec 2020 10:30:20 +0800</pubDate>
      
      <guid>https://lack-io.github.io/vine/docs/guides/service/</guid>
      <description>
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Service &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 服务名称
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;Name&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 初始化选项
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;Init&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;Option)
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 返回当前选项
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;Options&lt;/span&gt;() Options
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 返回服务的 Client 接口
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;Client&lt;/span&gt;() client.Client
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 返回服务的 Server 接口
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;Server&lt;/span&gt;() server.Server
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 启动服务
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 实现 server.Server 接口
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1初始化&#34;&gt;1.初始化&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;service.NewService&lt;/code&gt; 创建服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; vine &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/vine/service&amp;#34;&lt;/span&gt;

service = vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewService&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建时使用选项&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;service = vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewService&lt;/span&gt;(
    vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Name&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;),
    vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Version&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;latest&amp;#34;&lt;/span&gt;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;支持的选项，请看&lt;a href=&#34;https://pkg.go.dev/github.com/lack-io/vine/service#Option&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vine&lt;/strong&gt; 同时支持使用&lt;code&gt;service.Flags&lt;/code&gt; 来提供命令行参数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/cli&amp;#34;&lt;/span&gt;
	vine &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/vine/service&amp;#34;&lt;/span&gt;
)

	service &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewService&lt;/span&gt;(
		vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Flags&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;cli.StringFlag{
			Name:  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;environment&amp;#34;&lt;/span&gt;,
			Usage: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;The environment&amp;#34;&lt;/span&gt;,
		}),
	)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;service.Init&lt;/code&gt; 解析参数，并且使用 &lt;code&gt;service.Action&lt;/code&gt; 选项来访问参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	service.&lt;span style=&#34;color:#50fa7b&#34;&gt;Init&lt;/span&gt;(
		vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Action&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(c &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;cli.Context) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
			env &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; c.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;environment&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(env) &amp;gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
				fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Environment set to&amp;#34;&lt;/span&gt;, env)
			}

			&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
		}),
	)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;service.Init&lt;/code&gt; 支持的选择看&lt;a href=&#34;https://pkg.go.dev/github.com/lack-io/vine/service/config/cmd#pkg-variables&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2定义-api&#34;&gt;2.定义 API&lt;/h2&gt;
&lt;p&gt;使用 protobuf 文件定义服务的 API 接口。它可以能便利的提供严谨的 API 接口，同时为服务端和客户端提供具体的接口。
greeter.proto&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;syntax &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;service&lt;/span&gt; Greeter {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; Hello(Request) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (Response) {}
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Request&lt;/span&gt; {
	&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Response&lt;/span&gt; {
	&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; greeting &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们定义一个 Greeter 服务，提供 Hello 方法。Request 和 Response 是 Hello 方法的入参和返回值。&lt;/p&gt;
&lt;h2 id=&#34;3生成-api-接口&#34;&gt;3.生成 API 接口&lt;/h2&gt;
&lt;p&gt;你需要以下的工具来生成 protobuf 代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;protoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lack-io/vine/tree/master/cmd/protoc-gen-gogofaster&#34;&gt;protoc-gen-gogofaster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lack-io/vine/tree/master/cmd/protoc-gen-vine&#34;&gt;protoc-gen-vine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 protoc、protoc-gen-gogofaster、protoc-gen-vine 来生成 protobuf code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/gogo/protobuf
go get github.com/gogo/googleapis
go get github.com/lack-io/vine/cmd/protoc-gen-gogofaster
go get github.com/lack-io/vine/cmd/protoc-gen-vine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;protoc -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src/github.com/gogo/protobuf/protobuf --gogofaster_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;plugins&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;grpc:. --vine_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;. greeter.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它会生成以下代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Request &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	Name &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`protobuf:&amp;#34;bytes,1,opt,name=name&amp;#34; json:&amp;#34;name,omitempty&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Response &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	Greeting &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`protobuf:&amp;#34;bytes,2,opt,name=greeting&amp;#34; json:&amp;#34;greeting,omitempty&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// Client API for Greeter service
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; GreeterClient &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(ctx context.Context, in &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Request, opts &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;client.CallOption) (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Response, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; greeterClient &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	c           client.Client
	serviceName &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewGreeterClient&lt;/span&gt;(serviceName &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, c client.Client) GreeterClient {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		c = client.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewClient&lt;/span&gt;()
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(serviceName) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		serviceName = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;greeterClient{
		c:           c,
		serviceName: serviceName,
	}
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (c &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;greeterClient) &lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(ctx context.Context, in &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Request, opts &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;client.CallOption) (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Response, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
	req &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; c.c.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewRequest&lt;/span&gt;(c.serviceName, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Greeter.Hello&amp;#34;&lt;/span&gt;, in)
	out &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(Response)
	err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; c.c.&lt;span style=&#34;color:#50fa7b&#34;&gt;Call&lt;/span&gt;(ctx, req, out, opts&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, err
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; out, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// Server API for Greeter service
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; GreeterHandler &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(context.Context, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Request, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Response) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;RegisterGreeterHandler&lt;/span&gt;(s server.Server, hdlr GreeterHandler) {
	s.&lt;span style=&#34;color:#50fa7b&#34;&gt;Handle&lt;/span&gt;(s.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewHandler&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;Greeter{hdlr}))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4实现-handler&#34;&gt;4.实现 handler&lt;/h2&gt;
&lt;p&gt;handler.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; proto &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/vine/examples/service/proto&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Greeter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (g &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Greeter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(ctx context.Context, req &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pb.Request, rsp &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pb.Response) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
	rsp.Greeting = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; req.Name
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 handler 将被注册为服务，就像 http.Handler.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;service = vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewService&lt;/span&gt;(
    vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Name&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;),
)

pb.&lt;span style=&#34;color:#50fa7b&#34;&gt;RegisterGreeterHandler&lt;/span&gt;(service.Server, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(Greeter))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5启动服务&#34;&gt;5.启动服务&lt;/h2&gt;
&lt;p&gt;服务通过调用 &lt;code&gt;service.Run&lt;/code&gt; 来启动。它会绑定到配置参数提供的地址上并且监听请求。
服务启动时会通过 registry 组件注册服务，在接收到 kill 信号时注销服务。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; service.&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
    log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6完整的服务端代码&#34;&gt;6.完整的服务端代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;

        vine &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/vine/service&amp;#34;&lt;/span&gt;
        pb &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/examples/service/proto&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Greeter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (g &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Greeter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(ctx context.Context, req &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pb.Request, rsp &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pb.Response) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
        rsp.Greeting = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; req.Name
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
        service &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewService&lt;/span&gt;(
                vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Name&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;),
        )

        service.&lt;span style=&#34;color:#50fa7b&#34;&gt;Init&lt;/span&gt;()

        pb.&lt;span style=&#34;color:#50fa7b&#34;&gt;RegisterGreeterHandler&lt;/span&gt;(service.&lt;span style=&#34;color:#50fa7b&#34;&gt;Server&lt;/span&gt;(), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(Greeter))

        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; service.&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
                log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;客户端&#34;&gt;客户端&lt;/h2&gt;
&lt;p&gt;查询上面的服务，可以使用以下的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 创建 greeter 服务的客户端
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;greeter &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; pb.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewGreeterService&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;, service.&lt;span style=&#34;color:#50fa7b&#34;&gt;Client&lt;/span&gt;())

&lt;span style=&#34;color:#6272a4&#34;&gt;// 请求 Greeter 的 Hello 方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;rsp, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; greeter.&lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(context.&lt;span style=&#34;color:#50fa7b&#34;&gt;TODO&lt;/span&gt;(), &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;pb.Request{
	Name: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
})
&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(err)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
}

fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(rsp.Greeting)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Function</title>
      <link>https://lack-io.github.io/vine/docs/guides/function/</link>
      <pubDate>Tue, 29 Dec 2020 10:32:20 +0800</pubDate>
      
      <guid>https://lack-io.github.io/vine/docs/guides/function/</guid>
      <description>
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Function 一次性执行服务
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Function &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 内置服务接口
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	Service
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 接口服务
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 处理 rpc 请求
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;Handle&lt;/span&gt;(v &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#6272a4&#34;&gt;// 订阅者
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#50fa7b&#34;&gt;Subscribe&lt;/span&gt;(topic &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, v &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1初始化&#34;&gt;1.初始化&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;service.NewFunction&lt;/code&gt; 创建 Function&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; vine &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/vine/service&amp;#34;&lt;/span&gt;

function = vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewFunction&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建时使用选项&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;function = vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewService&lt;/span&gt;(
    vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Name&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;),
    vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Version&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;latest&amp;#34;&lt;/span&gt;),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;支持的选项，请看&lt;a href=&#34;https://pkg.go.dev/github.com/lack-io/vine/service#Option&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vine&lt;/strong&gt; 同时支持使用&lt;code&gt;service.Flags&lt;/code&gt; 来提供命令行参数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/cli&amp;#34;&lt;/span&gt;
	vine &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/vine/service&amp;#34;&lt;/span&gt;
)

	function &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewFunction&lt;/span&gt;(
		vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Flags&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;cli.StringFlag{
			Name:  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;environment&amp;#34;&lt;/span&gt;,
			Usage: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;The environment&amp;#34;&lt;/span&gt;,
		}),
	)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;service.Init&lt;/code&gt; 解析参数，并且使用 &lt;code&gt;service.Action&lt;/code&gt; 选项来访问参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	function.&lt;span style=&#34;color:#50fa7b&#34;&gt;Init&lt;/span&gt;(
		vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Action&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(c &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;cli.Context) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
			env &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; c.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;environment&amp;#34;&lt;/span&gt;)
			&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(env) &amp;gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
				fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Environment set to&amp;#34;&lt;/span&gt;, env)
			}

			&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
		}),
	)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;service.Init&lt;/code&gt; 支持的选择看&lt;a href=&#34;https://pkg.go.dev/github.com/lack-io/vine/service/config/cmd#pkg-variables&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2定义-api&#34;&gt;2.定义 API&lt;/h2&gt;
&lt;p&gt;使用 protobuf 文件定义服务的 API 接口。它可以能便利的提供严谨的 API 接口，同时为服务端和客户端提供具体的接口。
greeter.proto&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;syntax &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;service&lt;/span&gt; Greeter {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; Hello(Request) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (Response) {}
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Request&lt;/span&gt; {
	&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Response&lt;/span&gt; {
	&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; greeting &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们定义一个 Greeter 服务，提供 Hello 方法。Request 和 Response 是 Hello 方法的入参和返回值。&lt;/p&gt;
&lt;h2 id=&#34;3生成-api-接口&#34;&gt;3.生成 API 接口&lt;/h2&gt;
&lt;p&gt;使用 protoc、protoc-gen-gogofaster、protoc-gen-vine 来生成 protobuf code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/gogo/protobuf
go get github.com/gogo/googleapis
go get github.com/lack-io/vine/cmd/protoc-gen-gogofaster
go get github.com/lack-io/vine/cmd/protoc-gen-vine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;protoc -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src/github.com/gogo/protobuf/protobuf --gogofaster_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;plugins&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;grpc:. --vine_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;. greeter.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它会生成以下代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Request &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	Name &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`protobuf:&amp;#34;bytes,1,opt,name=name&amp;#34; json:&amp;#34;name,omitempty&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Response &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	Greeting &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`protobuf:&amp;#34;bytes,2,opt,name=greeting&amp;#34; json:&amp;#34;greeting,omitempty&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// Client API for Greeter service
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; GreeterClient &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(ctx context.Context, in &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Request, opts &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;client.CallOption) (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Response, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; greeterClient &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	c           client.Client
	serviceName &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewGreeterClient&lt;/span&gt;(serviceName &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, c client.Client) GreeterClient {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		c = client.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewClient&lt;/span&gt;()
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(serviceName) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		serviceName = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;greeterClient{
		c:           c,
		serviceName: serviceName,
	}
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (c &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;greeterClient) &lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(ctx context.Context, in &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Request, opts &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;client.CallOption) (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Response, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
	req &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; c.c.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewRequest&lt;/span&gt;(c.serviceName, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Greeter.Hello&amp;#34;&lt;/span&gt;, in)
	out &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(Response)
	err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; c.c.&lt;span style=&#34;color:#50fa7b&#34;&gt;Call&lt;/span&gt;(ctx, req, out, opts&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, err
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; out, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// Server API for Greeter service
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; GreeterHandler &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(context.Context, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Request, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Response) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;RegisterGreeterHandler&lt;/span&gt;(s server.Server, hdlr GreeterHandler) {
	s.&lt;span style=&#34;color:#50fa7b&#34;&gt;Handle&lt;/span&gt;(s.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewHandler&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;Greeter{hdlr}))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4实现-handler&#34;&gt;4.实现 handler&lt;/h2&gt;
&lt;p&gt;handler.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; proto &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/vine/examples/service/proto&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Greeter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (g &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Greeter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(ctx context.Context, req &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pb.Request, rsp &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pb.Response) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
	rsp.Greeting = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; req.Name
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 handler 将被注册为服务，就像 http.Handler.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;function = vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewFunction&lt;/span&gt;(
    vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Name&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;),
)

pb.&lt;span style=&#34;color:#50fa7b&#34;&gt;RegisterGreeterHandler&lt;/span&gt;(function.Server, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(Greeter))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5启动-function&#34;&gt;5.启动 Function&lt;/h2&gt;
&lt;p&gt;服务通过调用 &lt;code&gt;function.Run&lt;/code&gt; 来启动。它会绑定到配置参数提供的地址上并且监听请求。
服务启动时会通过 registry 组件注册服务，在接收到 kill 信号时注销服务。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; function.&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
    log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6完整的服务端代码&#34;&gt;6.完整的服务端代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;

        vine &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/vine/service&amp;#34;&lt;/span&gt;
        pb &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/examples/service/proto&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Greeter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (g &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Greeter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(ctx context.Context, req &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pb.Request, rsp &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pb.Response) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
        rsp.Greeting = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; req.Name
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
        function &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewFunction&lt;/span&gt;(
                vine.&lt;span style=&#34;color:#50fa7b&#34;&gt;Name&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;),
        )

        function.&lt;span style=&#34;color:#50fa7b&#34;&gt;Init&lt;/span&gt;()

        pb.&lt;span style=&#34;color:#50fa7b&#34;&gt;RegisterGreeterHandler&lt;/span&gt;(function.&lt;span style=&#34;color:#50fa7b&#34;&gt;Server&lt;/span&gt;(), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(Greeter))

        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; function.&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
                log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;客户端&#34;&gt;客户端&lt;/h2&gt;
&lt;p&gt;查询上面的 Function，可以使用以下的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 创建 greeter 服务的客户端
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;greeter &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; pb.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewGreeterService&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greeter&amp;#34;&lt;/span&gt;, function.&lt;span style=&#34;color:#50fa7b&#34;&gt;Client&lt;/span&gt;())

&lt;span style=&#34;color:#6272a4&#34;&gt;// 请求 Greeter 的 Hello 方法
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;rsp, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; greeter.&lt;span style=&#34;color:#50fa7b&#34;&gt;Hello&lt;/span&gt;(context.&lt;span style=&#34;color:#50fa7b&#34;&gt;TODO&lt;/span&gt;(), &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;pb.Request{
	Name: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
})
&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(err)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
}

fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(rsp.Greeting)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
