syntax = "proto3";

package dao;
option go_package = "github.com/lack-io/vine/proto/apis/dao;dao";

enum FieldType {
  TypeInvalid = 0;
  TypeBool = 1;
  TypeFloat32 = 2;
  TypeFloat64 = 3;
  TypeInt32 = 4;
  TypeInt64 = 5;
  TypeUint32 = 6;
  TypeUint64 = 7;
  TypeString = 8;
  TypeBytes = 9;
  TypeJSON = 10;
}

enum RelType {
  RelInvalid = 0;
  RelO2O = 1;   // one to one
  RelO2M = 2;   // one to many
  RelM2O = 3;   // many to one
  RelM2M = 4;   // many to many
  RelBidi = 5;  // many to many (bidirectional)
}

message Schema {
  string name = 1;
  string dbName = 2;
  repeated Field fields = 3;
  repeated Field primaryFields = 4;
  repeated Index indexes = 5;
  repeated Relationship relationships = 6;
  map<string, string> annotations = 21;
}

message Field {
  string name = 1;
  string dbName = 2;
  FieldType type = 3;
  bool primaryKey = 4;
  bool unique = 5;
  bool notNull = 6;
  bool autoIncrement = 7;
  bool default = 8;
  bytes defaultValue = 9;
  int32 size = 10;
  map<string, string> annotations = 21;
}

message Index {
  string name = 1;
  Field field = 2;
  map<string, string> annotations = 21;
}

message Relationship {
  RelType type = 1;
  Field owner = 2;
  Schema reference = 3;
}

message CreationOption {
  string schema = 1;
  repeated string fields = 2;
  map<string, bytes> values = 3;
}

message QueryOption {
  string schema = 1;
  repeated Predicate predicates = 2;
}

message UpdateOption {
  string schema = 1;
  repeated string fields = 2;
  map<string, bytes> values = 3;
  repeated Predicate predicates = 4;
  bool batch = 5;
}

message DeletionOption {
  string schema = 1;
  repeated Predicate predicates = 2;
  bool batch = 3;
}

message Result {
  repeated Value values = 1;
}

message Value {
  string schema = 1;
  map<string, string> annotations = 2;
  bytes rows = 3;
}

enum EventType {
  EventInvalid = 0;
  EventAdded = 1;
  EventModified = 2;
  EventDeleted = 3;
  EventError = 4;
}

message WatchOption {
  repeated string schemas = 1;
  repeated string allowsEvents = 2;
}

message WatchResult {
  EventType type = 1;
  repeated string changes = 2;
  Value oldValue = 3;
  Value value = 4;
}

enum PredicateOp {
  OpInvalid = 0;
  OpAnd = 1;      // AND
  OpOr = 2;       // OR
  OpGT = 3;       // >
  OpGTE = 4;      // >=
  OpLT = 5;       // <
  OpLTE = 6;      // <=
  OpEQ = 7;       // ==
  OpNEQ = 8;      // <>
  OpLike = 9;     // LIKE
  OpNotLike = 10; // NOT LIKE
  OpIn = 11;      // IN
  OpNotIn = 12;   // NOT IN
  OpIsNull = 13;  // is null
  OpNotNull = 14; // not null
}

message Predicate {
  PredicateOp op = 1;
  Field field = 2;
  string value = 3;
}