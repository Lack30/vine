// Code generated by proto-gen-vine. DO NOT EDIT.
// source: github.com/lack-io/vine/proto/router/router.proto

package router

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/lack-io/vine/service/api"
	client "github.com/lack-io/vine/service/client"
	server "github.com/lack-io/vine/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Router service
func NewRouterEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Router service
type RouterService interface {
	Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...client.CallOption) (Router_WatchService, error)
}

type routerService struct {
	c    client.Client
	name string
}

func NewRouterService(name string, c client.Client) RouterService {
	return &routerService{
		c:    c,
		name: name,
	}
}

func (c *routerService) Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error) {
	req := c.c.NewRequest(c.name, "Router.Lookup", in)
	out := new(LookupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerService) Watch(ctx context.Context, in *WatchRequest, opts ...client.CallOption) (Router_WatchService, error) {
	req := c.c.NewRequest(c.name, "Router.Watch", &WatchRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &routerServiceWatch{stream}, nil
}

type Router_WatchService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Event, error)
}

type routerServiceWatch struct {
	stream client.Stream
}

func (x *routerServiceWatch) Close() error {
	return x.stream.Close()
}

func (x *routerServiceWatch) Context() context.Context {
	return x.stream.Context()
}

func (x *routerServiceWatch) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *routerServiceWatch) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *routerServiceWatch) Recv() (*Event, error) {
	m := new(Event)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Router service
type RouterHandler interface {
	Lookup(context.Context, *LookupRequest, *LookupResponse) error
	Watch(context.Context, *WatchRequest, Router_WatchStream) error
}

func RegisterRouterHandler(s server.Server, hdlr RouterHandler, opts ...server.HandlerOption) error {
	type routerImpl interface {
		Lookup(ctx context.Context, in *LookupRequest, out *LookupResponse) error
		Watch(ctx context.Context, stream server.Stream) error
	}
	type Router struct {
		routerImpl
	}
	h := &routerHandler{hdlr}
	return s.Handle(s.NewHandler(&Router{h}, opts...))
}

type routerHandler struct {
	RouterHandler
}

func (h *routerHandler) Lookup(ctx context.Context, in *LookupRequest, out *LookupResponse) error {
	return h.RouterHandler.Lookup(ctx, in, out)
}

func (h *routerHandler) Watch(ctx context.Context, stream server.Stream) error {
	m := new(WatchRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RouterHandler.Watch(ctx, m, &routerWatchStream{stream})
}

type Router_WatchStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Event) error
}

type routerWatchStream struct {
	stream server.Stream
}

func (x *routerWatchStream) Close() error {
	return x.stream.Close()
}

func (x *routerWatchStream) Context() context.Context {
	return x.stream.Context()
}

func (x *routerWatchStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *routerWatchStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *routerWatchStream) Send(m *Event) error {
	return x.stream.Send(m)
}

// Api Endpoints for Table service
func NewTableEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Table service
type TableService interface {
	Create(ctx context.Context, in *Route, opts ...client.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *Route, opts ...client.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *Route, opts ...client.CallOption) (*UpdateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
}

type tableService struct {
	c    client.Client
	name string
}

func NewTableService(name string, c client.Client) TableService {
	return &tableService{
		c:    c,
		name: name,
	}
}

func (c *tableService) Create(ctx context.Context, in *Route, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Table.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableService) Delete(ctx context.Context, in *Route, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Table.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableService) Update(ctx context.Context, in *Route, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "Table.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.name, "Table.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Table service
type TableHandler interface {
	Create(context.Context, *Route, *CreateResponse) error
	Delete(context.Context, *Route, *DeleteResponse) error
	Update(context.Context, *Route, *UpdateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
}

func RegisterTableHandler(s server.Server, hdlr TableHandler, opts ...server.HandlerOption) error {
	type tableImpl interface {
		Create(ctx context.Context, in *Route, out *CreateResponse) error
		Delete(ctx context.Context, in *Route, out *DeleteResponse) error
		Update(ctx context.Context, in *Route, out *UpdateResponse) error
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
	}
	type Table struct {
		tableImpl
	}
	h := &tableHandler{hdlr}
	return s.Handle(s.NewHandler(&Table{h}, opts...))
}

type tableHandler struct {
	TableHandler
}

func (h *tableHandler) Create(ctx context.Context, in *Route, out *CreateResponse) error {
	return h.TableHandler.Create(ctx, in, out)
}

func (h *tableHandler) Delete(ctx context.Context, in *Route, out *DeleteResponse) error {
	return h.TableHandler.Delete(ctx, in, out)
}

func (h *tableHandler) Update(ctx context.Context, in *Route, out *UpdateResponse) error {
	return h.TableHandler.Update(ctx, in, out)
}

func (h *tableHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.TableHandler.Read(ctx, in, out)
}
