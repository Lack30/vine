'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/vine/docs/guides/function/','title':"Function",'section':"Docs",'content':"这是一份关于如何编写 Function 服务的指南。Function 是指只执行一次的服务。\n// Function 一次性执行服务 type Function interface { // 内置服务接口 \tService // 接口服务 \tDone() error // 处理 rpc 请求 \tHandle(v interface{}) error // 订阅者 \tSubscribe(topic string, v interface{}) error } 1.初始化 #  使用 service.NewFunction 创建 Function\nimport vine \u0026#34;github.com/lack-io/vine/service\u0026#34; function = vine.NewFunction() 创建时使用选项\nfunction = vine.NewService( vine.Name(\u0026#34;greeter\u0026#34;), vine.Version(\u0026#34;latest\u0026#34;), ) 支持的选项，请看 这里\nVine 同时支持使用service.Flags 来提供命令行参数:\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/lack-io/cli\u0026#34; vine \u0026#34;github.com/lack-io/vine/service\u0026#34; ) function := vine.NewFunction( vine.Flags(\u0026amp;cli.StringFlag{ Name: \u0026#34;environment\u0026#34;, Usage: \u0026#34;The environment\u0026#34;, }), ) 使用 service.Init 解析参数，并且使用 service.Action 选项来访问参数：\nfunction.Init( vine.Action(func(c *cli.Context) error { env := c.String(\u0026#34;environment\u0026#34;) if len(env) \u0026gt; 0 { fmt.Println(\u0026#34;Environment set to\u0026#34;, env) } return nil }), ) service.Init 支持的选择看 这里\n2.定义 API #  使用 protobuf 文件定义服务的 API 接口。它可以能便利的提供严谨的 API 接口，同时为服务端和客户端提供具体的接口。 greeter.proto\nsyntax = \u0026#34;proto3\u0026#34;;service Greeter {\trpc Hello(Request) returns (Response) {}}message Request {\tstring name = 1;}message Response {\tstring greeting = 2;}这里我们定义一个 Greeter 服务，提供 Hello 方法。Request 和 Response 是 Hello 方法的入参和返回值。\n3.生成 API 接口 #  使用 protoc、protoc-gen-gogofaster、protoc-gen-vine 来生成 protobuf code\ngo get github.com/gogo/protobuf go get github.com/gogo/googleapis go get github.com/lack-io/vine/cmd/protoc-gen-gogofaster go get github.com/lack-io/vine/cmd/protoc-gen-vine protoc -I=$GOPATH/src -I=$GOPATH/src/github.com/gogo/protobuf/protobuf --gogofaster_out=plugins=grpc:. --vine_out=. greeter.proto 它会生成以下代码:\ntype Request struct { Name string `protobuf:\u0026#34;bytes,1,opt,name=name\u0026#34; json:\u0026#34;name,omitempty\u0026#34;` } type Response struct { Greeting string `protobuf:\u0026#34;bytes,2,opt,name=greeting\u0026#34; json:\u0026#34;greeting,omitempty\u0026#34;` } // Client API for Greeter service  type GreeterClient interface { Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) } type greeterClient struct { c client.Client serviceName string } func NewGreeterClient(serviceName string, c client.Client) GreeterClient { if c == nil { c = client.NewClient() } if len(serviceName) == 0 { serviceName = \u0026#34;greeter\u0026#34; } return \u0026amp;greeterClient{ c: c, serviceName: serviceName, } } func (c *greeterClient) Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) { req := c.c.NewRequest(c.serviceName, \u0026#34;Greeter.Hello\u0026#34;, in) out := new(Response) err := c.c.Call(ctx, req, out, opts...) if err != nil { return nil, err } return out, nil } // Server API for Greeter service  type GreeterHandler interface { Hello(context.Context, *Request, *Response) error } func RegisterGreeterHandler(s server.Server, hdlr GreeterHandler) { s.Handle(s.NewHandler(\u0026amp;Greeter{hdlr})) } 4.实现 handler\nhandler.go\nimport proto \u0026#34;github.com/vine/examples/service/proto\u0026#34; type Greeter struct{} func (g *Greeter) Hello(ctx context.Context, req *pb.Request, rsp *pb.Response) error { rsp.Greeting = \u0026#34;Hello \u0026#34; + req.Name return nil } 这个 handler 将被注册为服务，就像 http.Handler.\nfunction = vine.NewFunction( vine.Name(\u0026#34;greeter\u0026#34;), ) pb.RegisterGreeterHandler(function.Server, new(Greeter)) 5.启动 Function #  服务通过调用 function.Run 来启动。它会绑定到配置参数提供的地址上并且监听请求。 服务启动时会通过 registry 组件注册服务，在接收到 kill 信号时注销服务。\nif err := function.Run(); err != nil { log.Fatal(err) } 6.完整的服务端代码 #  package main import ( \u0026#34;log\u0026#34; \u0026#34;context\u0026#34; vine \u0026#34;github.com/lack-io/vine/service\u0026#34; pb \u0026#34;github.com/lack-io/examples/service/proto\u0026#34; ) type Greeter struct{} func (g *Greeter) Hello(ctx context.Context, req *pb.Request, rsp *pb.Response) error { rsp.Greeting = \u0026#34;Hello \u0026#34; + req.Name return nil } func main() { function := vine.NewFunction( vine.Name(\u0026#34;greeter\u0026#34;), ) function.Init() pb.RegisterGreeterHandler(function.Server(), new(Greeter)) if err := function.Run(); err != nil { log.Fatal(err) } } 客户端 #  查询上面的 Function，可以使用以下的代码\n// 创建 greeter 服务的客户端 greeter := pb.NewGreeterService(\u0026#34;greeter\u0026#34;, function.Client()) // 请求 Greeter 的 Hello 方法 rsp, err := greeter.Hello(context.TODO(), \u0026amp;pb.Request{ Name: \u0026#34;John\u0026#34;, }) if err != nil { fmt.Println(err) return } fmt.Println(rsp.Greeting) "});index.add({'id':1,'href':'/vine/docs/guides/service/','title':"Service",'section':"Docs",'content':"这是一份编写服务的更加详细的指南。Service 是其他主要组件服务的顶层接口，它将所有底层包包裹在一个更加方便的接口中。\ntype Service interface { // 服务名称 \tName() string // 初始化选项 \tInit(...Option) // 返回当前选项 \tOptions() Options // 返回服务的 Client 接口 \tClient() client.Client // 返回服务的 Server 接口 \tServer() server.Server // 启动服务 \tRun() error // 实现 server.Server 接口 \tString() string } 1.初始化 #  使用 service.NewService 创建服务\nimport vine \u0026#34;github.com/lack-io/vine/service\u0026#34; service = vine.NewService() 创建时使用选项\nservice = vine.NewService( vine.Name(\u0026#34;greeter\u0026#34;), vine.Version(\u0026#34;latest\u0026#34;), ) 支持的选项，请看 这里\nVine 同时支持使用service.Flags 来提供命令行参数:\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/lack-io/cli\u0026#34; vine \u0026#34;github.com/lack-io/vine/service\u0026#34; ) service := vine.NewService( vine.Flags(\u0026amp;cli.StringFlag{ Name: \u0026#34;environment\u0026#34;, Usage: \u0026#34;The environment\u0026#34;, }), ) 使用 service.Init 解析参数，并且使用 service.Action 选项来访问参数：\nservice.Init( vine.Action(func(c *cli.Context) error { env := c.String(\u0026#34;environment\u0026#34;) if len(env) \u0026gt; 0 { fmt.Println(\u0026#34;Environment set to\u0026#34;, env) } return nil }), ) service.Init 支持的选择看 这里\n2.定义 API #  使用 protobuf 文件定义服务的 API 接口。它可以能便利的提供严谨的 API 接口，同时为服务端和客户端提供具体的接口。 greeter.proto\nsyntax = \u0026#34;proto3\u0026#34;;service Greeter {\trpc Hello(Request) returns (Response) {}}message Request {\tstring name = 1;}message Response {\tstring greeting = 2;}这里我们定义一个 Greeter 服务，提供 Hello 方法。Request 和 Response 是 Hello 方法的入参和返回值。\n3.生成 API 接口 #  你需要以下的工具来生成 protobuf 代码\n  protoc  protoc-gen-gogofaster  protoc-gen-vine  使用 protoc、protoc-gen-gogofaster、protoc-gen-vine 来生成 protobuf code\ngo get github.com/gogo/protobuf go get github.com/gogo/googleapis go get github.com/lack-io/vine/cmd/protoc-gen-gogofaster go get github.com/lack-io/vine/cmd/protoc-gen-vine protoc -I=$GOPATH/src -I=$GOPATH/src/github.com/gogo/protobuf/protobuf --gogofaster_out=plugins=grpc:. --vine_out=. greeter.proto 它会生成以下代码:\ntype Request struct { Name string `protobuf:\u0026#34;bytes,1,opt,name=name\u0026#34; json:\u0026#34;name,omitempty\u0026#34;` } type Response struct { Greeting string `protobuf:\u0026#34;bytes,2,opt,name=greeting\u0026#34; json:\u0026#34;greeting,omitempty\u0026#34;` } // Client API for Greeter service  type GreeterClient interface { Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) } type greeterClient struct { c client.Client serviceName string } func NewGreeterClient(serviceName string, c client.Client) GreeterClient { if c == nil { c = client.NewClient() } if len(serviceName) == 0 { serviceName = \u0026#34;greeter\u0026#34; } return \u0026amp;greeterClient{ c: c, serviceName: serviceName, } } func (c *greeterClient) Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) { req := c.c.NewRequest(c.serviceName, \u0026#34;Greeter.Hello\u0026#34;, in) out := new(Response) err := c.c.Call(ctx, req, out, opts...) if err != nil { return nil, err } return out, nil } // Server API for Greeter service  type GreeterHandler interface { Hello(context.Context, *Request, *Response) error } func RegisterGreeterHandler(s server.Server, hdlr GreeterHandler) { s.Handle(s.NewHandler(\u0026amp;Greeter{hdlr})) } 4.实现 handler\nhandler.go\nimport proto \u0026#34;github.com/vine/examples/service/proto\u0026#34; type Greeter struct{} func (g *Greeter) Hello(ctx context.Context, req *pb.Request, rsp *pb.Response) error { rsp.Greeting = \u0026#34;Hello \u0026#34; + req.Name return nil } 这个 handler 将被注册为服务，就像 http.Handler.\nservice = vine.NewService( vine.Name(\u0026#34;greeter\u0026#34;), ) pb.RegisterGreeterHandler(service.Server, new(Greeter)) 5.启动服务 #  服务通过调用 service.Run 来启动。它会绑定到配置参数提供的地址上并且监听请求。 服务启动时会通过 registry 组件注册服务，在接收到 kill 信号时注销服务。\nif err := service.Run(); err != nil { log.Fatal(err) } 6.完整的服务端代码 #  package main import ( \u0026#34;log\u0026#34; \u0026#34;context\u0026#34; vine \u0026#34;github.com/lack-io/vine/service\u0026#34; pb \u0026#34;github.com/lack-io/examples/service/proto\u0026#34; ) type Greeter struct{} func (g *Greeter) Hello(ctx context.Context, req *pb.Request, rsp *pb.Response) error { rsp.Greeting = \u0026#34;Hello \u0026#34; + req.Name return nil } func main() { service := vine.NewService( vine.Name(\u0026#34;greeter\u0026#34;), ) service.Init() pb.RegisterGreeterHandler(service.Server(), new(Greeter)) if err := service.Run(); err != nil { log.Fatal(err) } } 客户端 #  查询上面的服务，可以使用以下的代码\n// 创建 greeter 服务的客户端 greeter := pb.NewGreeterService(\u0026#34;greeter\u0026#34;, service.Client()) // 请求 Greeter 的 Hello 方法 rsp, err := greeter.Hello(context.TODO(), \u0026amp;pb.Request{ Name: \u0026#34;John\u0026#34;, }) if err != nil { fmt.Println(err) return } fmt.Println(rsp.Greeting) "});index.add({'id':2,'href':'/vine/docs/info/buttons/','title':"Buttons",'section':"Info",'content':"Buttons #  Buttons are styled links that can lead to local page or external link.\nExample #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "});index.add({'id':3,'href':'/vine/docs/info/columns/','title':"Columns",'section':"Info",'content':"Columns #  Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example #  Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "});index.add({'id':4,'href':'/vine/docs/info/expand/','title':"Expand",'section':"Info",'content':"Expand #  Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample #  Default #  {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Expand ↕  Markdown content Lorem markdownum insigne\u0026hellip;    With Custom Label #  {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Custom Label ...  Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    "});index.add({'id':5,'href':'/vine/docs/info/hints/','title':"Hints",'section':"Info",'content':"Hints #  Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example #  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "});index.add({'id':6,'href':'/vine/docs/info/katex/','title':"Katex",'section':"Info",'content':"KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample #  {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}}     \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]    Display Mode Example #  Here is some inline example:  \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block  \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]  Text continues here.\n"});index.add({'id':7,'href':'/vine/docs/info/mermaid/','title':"Mermaid",'section':"Info",'content':"Mermaid Chart #   Mermaid is library for generating svg charts and diagrams from text.\nExample #  {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? alt is sick Bob-\u0026gt;\u0026gt;Alice: Not so good :( else is well Bob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-\u0026gt;\u0026gt;Alice: Thanks for asking end {{\u0026lt; /mermaid \u0026gt;}}    mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) sequenceDiagram Alice-Bob: Hello Bob, how are you? alt is sick Bob-Alice: Not so good :( else is well Bob-Alice: Feeling fresh like a daisy end opt Extra response Bob-Alice: Thanks for asking end   "});index.add({'id':8,'href':'/vine/docs/info/section/','title':"Section",'section':"Info",'content':"Section #  Section renders pages in section as definition list, using title and description.\nExample #  {{\u0026lt; section \u0026gt;}}   Page1   Page 1 #   Page2   Page 2 #   "});index.add({'id':9,'href':'/vine/docs/info/section/page1/','title':"Page1",'section':"Section",'content':"Page 1 #  "});index.add({'id':10,'href':'/vine/docs/info/section/page2/','title':"Page2",'section':"Section",'content':"Page 2 #  "});index.add({'id':11,'href':'/vine/docs/info/tabs/','title':"Tabs",'section':"Info",'content':"Tabs #  Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example #  MacOS MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "});})();