// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/lack-io/vine/proto/services/dao/dao.proto

package dao

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	dao "github.com/lack-io/vine/proto/apis/dao"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MigrateRequest struct {
	Schemas []*dao.Schema `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
}

func (m *MigrateRequest) Reset()         { *m = MigrateRequest{} }
func (m *MigrateRequest) String() string { return proto.CompactTextString(m) }
func (*MigrateRequest) ProtoMessage()    {}
func (*MigrateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_defa0a9807bbd505, []int{0}
}
func (m *MigrateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MigrateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MigrateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MigrateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrateRequest.Merge(m, src)
}
func (m *MigrateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MigrateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MigrateRequest proto.InternalMessageInfo

func (m *MigrateRequest) GetSchemas() []*dao.Schema {
	if m != nil {
		return m.Schemas
	}
	return nil
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_defa0a9807bbd505, []int{1}
}
func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return m.Size()
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MigrateRequest)(nil), "dao.MigrateRequest")
	proto.RegisterType((*EmptyResponse)(nil), "dao.EmptyResponse")
}

func init() {
	proto.RegisterFile("github.com/lack-io/vine/proto/services/dao/dao.proto", fileDescriptor_defa0a9807bbd505)
}

var fileDescriptor_defa0a9807bbd505 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x49, 0x4c, 0xce, 0xd6, 0xcd, 0xcc, 0xd7, 0x2f,
	0xcb, 0xcc, 0x4b, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0x2d, 0xd6, 0x4f, 0x49, 0xcc, 0x07, 0x61, 0x3d, 0xb0, 0xb0, 0x10, 0x73, 0x4a, 0x62, 0xbe,
	0x94, 0x01, 0x7e, 0xad, 0x89, 0x05, 0x99, 0x68, 0xda, 0x94, 0xcc, 0xb9, 0xf8, 0x7c, 0x33, 0xd3,
	0x8b, 0x12, 0x4b, 0x52, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x54, 0xb9, 0xd8, 0x8b,
	0x93, 0x33, 0x52, 0x73, 0x13, 0x8b, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0xb8, 0xf5, 0x40,
	0xca, 0x83, 0xc1, 0x62, 0x41, 0x30, 0x39, 0x25, 0x7e, 0x2e, 0x5e, 0xd7, 0xdc, 0x82, 0x92, 0xca,
	0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa3, 0x79, 0x4c, 0x5c, 0xcc, 0x2e, 0x89, 0xf9,
	0x42, 0x26, 0x5c, 0xec, 0x50, 0x13, 0x85, 0x84, 0xc1, 0x3a, 0x51, 0xcd, 0x97, 0x12, 0x02, 0x0b,
	0xa2, 0xe8, 0x55, 0x62, 0x10, 0xd2, 0xe1, 0x62, 0x73, 0x2e, 0x4a, 0x45, 0x68, 0x02, 0x73, 0x32,
	0xf3, 0xf3, 0xfc, 0x0b, 0x40, 0xa4, 0x14, 0xc4, 0x0d, 0x41, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x4a,
	0x0c, 0x42, 0x1a, 0x5c, 0xac, 0x81, 0xa5, 0xa9, 0x45, 0x95, 0x42, 0x02, 0x60, 0x71, 0x30, 0x1b,
	0xbb, 0x4a, 0x2d, 0x2e, 0xb6, 0xd0, 0x82, 0x14, 0x90, 0xb9, 0x82, 0x60, 0x09, 0x08, 0x07, 0xbb,
	0x5a, 0x1d, 0x2e, 0x36, 0x97, 0xd4, 0x9c, 0x54, 0xb8, 0x1b, 0xc0, 0x1c, 0x9c, 0x6e, 0xd0, 0xe7,
	0x62, 0x0d, 0x4f, 0x2c, 0x49, 0xce, 0x80, 0xba, 0x01, 0xcc, 0x86, 0xaa, 0x44, 0x12, 0x81, 0x29,
	0x37, 0x60, 0x74, 0xf2, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4,
	0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x3d,
	0xe2, 0x63, 0xdc, 0x3a, 0x25, 0x31, 0x3f, 0x89, 0x0d, 0x2c, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x1d, 0x39, 0xfc, 0x29, 0x2a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DaoClient is the client API for Dao service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DaoClient interface {
	Migrate(ctx context.Context, in *MigrateRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Create(ctx context.Context, in *dao.CreationOption, opts ...grpc.CallOption) (*dao.Result, error)
	Query(ctx context.Context, in *dao.QueryOption, opts ...grpc.CallOption) (*dao.Result, error)
	Update(ctx context.Context, in *dao.UpdateOption, opts ...grpc.CallOption) (*dao.Result, error)
	Delete(ctx context.Context, in *dao.DeletionOption, opts ...grpc.CallOption) (*dao.Result, error)
	Watch(ctx context.Context, in *dao.WatchOption, opts ...grpc.CallOption) (Dao_WatchClient, error)
}

type daoClient struct {
	cc *grpc.ClientConn
}

func NewDaoClient(cc *grpc.ClientConn) DaoClient {
	return &daoClient{cc}
}

func (c *daoClient) Migrate(ctx context.Context, in *MigrateRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/dao.Dao/Migrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) Create(ctx context.Context, in *dao.CreationOption, opts ...grpc.CallOption) (*dao.Result, error) {
	out := new(dao.Result)
	err := c.cc.Invoke(ctx, "/dao.Dao/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) Query(ctx context.Context, in *dao.QueryOption, opts ...grpc.CallOption) (*dao.Result, error) {
	out := new(dao.Result)
	err := c.cc.Invoke(ctx, "/dao.Dao/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) Update(ctx context.Context, in *dao.UpdateOption, opts ...grpc.CallOption) (*dao.Result, error) {
	out := new(dao.Result)
	err := c.cc.Invoke(ctx, "/dao.Dao/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) Delete(ctx context.Context, in *dao.DeletionOption, opts ...grpc.CallOption) (*dao.Result, error) {
	out := new(dao.Result)
	err := c.cc.Invoke(ctx, "/dao.Dao/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) Watch(ctx context.Context, in *dao.WatchOption, opts ...grpc.CallOption) (Dao_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Dao_serviceDesc.Streams[0], "/dao.Dao/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &daoWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dao_WatchClient interface {
	Recv() (*dao.WatchResult, error)
	grpc.ClientStream
}

type daoWatchClient struct {
	grpc.ClientStream
}

func (x *daoWatchClient) Recv() (*dao.WatchResult, error) {
	m := new(dao.WatchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DaoServer is the server API for Dao service.
type DaoServer interface {
	Migrate(context.Context, *MigrateRequest) (*EmptyResponse, error)
	Create(context.Context, *dao.CreationOption) (*dao.Result, error)
	Query(context.Context, *dao.QueryOption) (*dao.Result, error)
	Update(context.Context, *dao.UpdateOption) (*dao.Result, error)
	Delete(context.Context, *dao.DeletionOption) (*dao.Result, error)
	Watch(*dao.WatchOption, Dao_WatchServer) error
}

// UnimplementedDaoServer can be embedded to have forward compatible implementations.
type UnimplementedDaoServer struct {
}

func (*UnimplementedDaoServer) Migrate(ctx context.Context, req *MigrateRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (*UnimplementedDaoServer) Create(ctx context.Context, req *dao.CreationOption) (*dao.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedDaoServer) Query(ctx context.Context, req *dao.QueryOption) (*dao.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedDaoServer) Update(ctx context.Context, req *dao.UpdateOption) (*dao.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedDaoServer) Delete(ctx context.Context, req *dao.DeletionOption) (*dao.Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDaoServer) Watch(req *dao.WatchOption, srv Dao_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterDaoServer(s *grpc.Server, srv DaoServer) {
	s.RegisterService(&_Dao_serviceDesc, srv)
}

func _Dao_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.Dao/Migrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).Migrate(ctx, req.(*MigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dao.CreationOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.Dao/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).Create(ctx, req.(*dao.CreationOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dao.QueryOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.Dao/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).Query(ctx, req.(*dao.QueryOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dao.UpdateOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.Dao/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).Update(ctx, req.(*dao.UpdateOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dao.DeletionOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.Dao/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).Delete(ctx, req.(*dao.DeletionOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(dao.WatchOption)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaoServer).Watch(m, &daoWatchServer{stream})
}

type Dao_WatchServer interface {
	Send(*dao.WatchResult) error
	grpc.ServerStream
}

type daoWatchServer struct {
	grpc.ServerStream
}

func (x *daoWatchServer) Send(m *dao.WatchResult) error {
	return x.ServerStream.SendMsg(m)
}

var _Dao_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dao.Dao",
	HandlerType: (*DaoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Migrate",
			Handler:    _Dao_Migrate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Dao_Create_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Dao_Query_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Dao_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Dao_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Dao_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/lack-io/vine/proto/services/dao/dao.proto",
}

func (m *MigrateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigrateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MigrateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDao(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintDao(dAtA []byte, offset int, v uint64) int {
	offset -= sovDao(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MigrateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, e := range m.Schemas {
			l = e.Size()
			n += 1 + l + sovDao(uint64(l))
		}
	}
	return n
}

func (m *EmptyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovDao(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDao(x uint64) (n int) {
	return sovDao(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MigrateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MigrateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MigrateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, &dao.Schema{})
			if err := m.Schemas[len(m.Schemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDao(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDao
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDao
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDao
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDao
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDao        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDao          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDao = fmt.Errorf("proto: unexpected end of group")
)
