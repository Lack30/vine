syntax = "proto3";

package stats;

option go_package = "github.com/lack-io/vine/proto/services/debug/stats;stats";

// Stats retrieves a snapshot of the Debug.Stats data for services
service Stats {
  rpc Read(ReadRequest) returns (ReadResponse);
  rpc Write(WriteRequest) returns (WriteResponse);
  rpc Stream(StreamRequest) returns (stream StreamResponse);
}

// Service describes a service running in the vine network.
message Service {
  // Service name, e.g. go.vine.service.greeter
  string name = 1;
  string version = 2;
  Node node = 3;
}

// Node describes a single instance of a service.
message Node {
  string id = 1;
  string address = 2;
}

// Snapshot is a snapshot of Debug.Stats from a particular service when called.
message Snapshot {
  Service service = 1;
  // Unix timestamp, e.g. 1575561487
  int64 started = 2;
  // Uptime in seconds
  uint64 uptime = 3;
  // Heap allocated in bytes (TODO: change to resident set size)
  uint64 memory = 4;
  // Number of Goroutines
  uint64 threads = 5;
  // GC Pause total in ns
  uint64 gc = 6;
  // Total number of request
  uint64 requests = 7;
  // Total number of errors
  uint64 errors = 8;
  // Timestamp at the time of the taking of the snapshot, seconds since unix epoch
  uint64 timestamp = 9;
}

message ReadRequest {
  // If set, only return services matching the filter
  Service service = 1;
  // If false, only the current snapshots will be returned.
  // If true, all historical snapshots in memory will be returned.
  bool past = 2;
}

message ReadResponse {
  repeated Snapshot stats = 1;
}

message WriteRequest {
  // If set, only return services matching the filter
  Service service = 1;
  // snapshot to write
  Snapshot stats = 2;
}

message WriteResponse {}

message StreamRequest {
  // If set, only return services matching the filter
  Service service = 1;
  // If set, only return services matching the namespace
  string namespace = 2;
}

message StreamResponse {
  repeated Snapshot stats = 1;
}
