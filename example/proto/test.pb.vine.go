// Code generated by proto-gen-vine. DO NOT EDIT.
// source: testdata/proto/test.proto

package testdata

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/lack-io/vine/api"
	client "github.com/lack-io/vine/client"
	server "github.com/lack-io/vine/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Rpc service
func NewRpcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rpc service
type RpcService interface {
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error)
}

type rpcService struct {
	c    client.Client
	name string
}

func NewRpcService(name string, c client.Client) RpcService {
	return &rpcService{
		c:    c,
		name: name,
	}
}

func (c *rpcService) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error) {
	req := c.c.NewRequest(c.name, "Rpc.HelloWorld", in)
	out := new(HelloWorldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service
type RpcHandler interface {
	HelloWorld(context.Context, *HelloWorldRequest, *HelloWorldResponse) error
}

func RegisterRpcHandler(s server.Server, hdlr RpcHandler, opts ...server.HandlerOption) error {
	type rpc interface {
		HelloWorld(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error
	}
	type Rpc struct {
		rpc
	}
	h := &rpcHandler{hdlr}
	return s.Handle(s.NewHandler(&Rpc{h}, opts...))
}

type rpcHandler struct {
	RpcHandler
}

func (h *rpcHandler) HelloWorld(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error {
	return h.RpcHandler.HelloWorld(ctx, in, out)
}
